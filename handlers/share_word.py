from aiogram import Bot, Router
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link

import re

router = Router()

class waiting(StatesGroup):
    waiting_word = State()

def validate_russian_word(word: str) -> bool:
    pattern = r'^[–∞-—è—ë–ê-–Ø–Å]+$'
    return bool(re.match(pattern, word))

@router.callback_query(F.data == "share")
async def share_world(callback: CallbackQuery, state: FSMContext, ):
    await state.set_state(waiting.waiting_word)
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥—Ä—É–≥–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(waiting.waiting_word, F.text)
async def process_word(message: Message, state: FSMContext, bot: Bot):
    word = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–≤–∞
    if not validate_russian_word(word):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤.\n"
            "–ü—Ä–∏–º–µ—Ä: –ø—Ä–∏–≤–µ—Ç, –¥–æ–º, —Å–æ–ª–Ω—Ü–µ"
        )
        return  # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if len(word) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ!\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π –æ—Ç 2 –±—É–∫–≤."
        )
        return
    
    if len(word) > 8:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ!\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π –¥–æ 9 –±—É–∫–≤."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_word=word)
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É
    ref_link = await create_start_link(
        bot=bot, 
        payload=word,
        encode=True
    )
    
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–æ –¥–ª—è –¥—Ä—É–≥–∞: <b>{word}</b>\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É!",
        parse_mode="HTML",
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–µ —Ç–µ–∫—Å—Ç)
@router.message(waiting.waiting_word)
async def process_invalid_input(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤.\n"
        "–ü—Ä–∏–º–µ—Ä: –ø—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ, —Ä–∞–¥–æ—Å—Ç—å"
    )

