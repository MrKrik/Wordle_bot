from aiogram import Bot, Dispatcher, Router
from aiogram import types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import random
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from main import bot
from kb import start_kb
router = Router()

# WRONG = "üü•"
# –°ORRECT = "üü©"
# MISS = "üü®"
# CLEAR = "‚¨úÔ∏è"

class Game(StatesGroup):
    in_game = State()

@router.callback_query(F.data == "start_game")
async def start_game(callback: CallbackQuery | None, state: FSMContext | None, world: str = None, msg: Message = None, world_lenght: int = None):
    
    if world == None:
        world = generate_world(world_lenght=world_lenght)

    if callback != None:
        await callback.message.delete()

    game_text = "‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è \n‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è \n‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è \n‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è \n‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è"
    if msg != None:
        game_msg = await msg.answer(game_text, reply_markup=start_kb.again_kb())
    else:
        game_msg = await callback.message.answer(game_text, reply_markup=start_kb.again_kb())

    await state.set_state(Game.in_game)

    await state.update_data(move=0)
    await state.update_data(world=world)
    await state.update_data(id=game_msg.message_id)
    await state.update_data(game_text=game_text)

    return

@router.message(Game.in_game)
async def game(message: types.Message, state: FSMContext):
    
    await message.delete()

    data = await state.get_data()

    

    result = compare_words(data["world"], message.text)
    result = ''.join(result)

    if data["move"] == 4 and result != "üü©üü©üü©üü©üü©":
        await state.clear()
        new_text = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ‚ùå\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: {data["world"]}"
        await bot.edit_message_text(chat_id=message.chat.id,
                                 message_id=data['id'],
                                 text=new_text,
                                 reply_markup=start_kb.again_kb())
        return

    if result == "üü©üü©üü©üü©üü©":
        await state.clear()
        new_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ‚úîÔ∏è\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: {data["world"]}"
        await bot.edit_message_text(chat_id=message.chat.id,
                                 message_id=data['id'],
                                 text=new_text,
                                 reply_markup=start_kb.again_kb())
        return

    game_message :str = data["game_text"]


    text = game_message.split(" ")
    text[data["move"]] = f"{message.text}\n{result}\n"
    new_text = ' '.join(text)

    await state.update_data(move=data["move"]+1)
    await state.update_data(game_text=new_text)

    await bot.edit_message_text(chat_id=message.chat.id,
                                 message_id=data['id'],
                                 text=new_text,
                                 reply_markup=start_kb.again_kb())

def compare_words(secret: str, guess: str) -> list[tuple[str, int]]:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Wordle.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–±—É–∫–≤–∞, –∫–æ–¥):
    üü© - –±—É–∫–≤–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ (–∑–µ–ª–µ–Ω—ã–π)
    üü® - –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –≤ –¥—Ä—É–≥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∂–µ–ª—Ç—ã–π)
    üü• - –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ (–∫—Ä–∞—Å–Ω—ã–π)
    """
    secret = secret.lower()
    guess = guess.lower()
    if len(secret) != len(guess):
        return "LEN"
    result = []
    secret_list = list(secret)
    guess_list = list(guess)
    for i in range(len(guess_list)):
        if guess_list[i] == secret_list[i]:
            result.append(("üü©"))
            secret_list[i] = None  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            guess_list[i] = None
        else:
            result.append("üü•")  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º –∂–µ–ª—Ç—ã–µ
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö (1)
    for i in range(len(guess_list)):
        if guess_list[i] is not None and guess_list[i] in secret_list:
            result[i] = ("üü®")
            secret_list[secret_list.index(guess_list[i])] = None  # –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    
    return result


def generate_world(world_lenght: int):
    with open(f"russian_worlds/{world_lenght}.txt", "r", encoding="utf-8") as file:
        words = file.read().splitlines()

    random_word = random.choice(words)

    return random_word

